# coding: utf-8

"""
    Cal.com API v2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import List, Optional, Union
from typing_extensions import Annotated
from openapi_client.models.bookings_controller20240813_create_booking_request import BookingsController20240813CreateBookingRequest
from openapi_client.models.cancel_booking_input20240813 import CancelBookingInput20240813
from openapi_client.models.cancel_booking_output20240813 import CancelBookingOutput20240813
from openapi_client.models.create_booking_output20240813 import CreateBookingOutput20240813
from openapi_client.models.get_booking_output20240813 import GetBookingOutput20240813
from openapi_client.models.get_bookings_output20240813 import GetBookingsOutput20240813
from openapi_client.models.mark_absent_booking_input20240813 import MarkAbsentBookingInput20240813
from openapi_client.models.mark_absent_booking_output20240813 import MarkAbsentBookingOutput20240813
from openapi_client.models.reschedule_booking_input20240813 import RescheduleBookingInput20240813
from openapi_client.models.reschedule_booking_output20240813 import RescheduleBookingOutput20240813

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class BookingsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def bookings_controller20240813_cancel_booking(
        self,
        cal_api_version: Annotated[StrictStr, Field(description="Must be set to `2024-08-13`")],
        booking_uid: StrictStr,
        cancel_booking_input20240813: CancelBookingInput20240813,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CancelBookingOutput20240813:
        """Cancel a booking


        :param cal_api_version: Must be set to `2024-08-13` (required)
        :type cal_api_version: str
        :param booking_uid: (required)
        :type booking_uid: str
        :param cancel_booking_input20240813: (required)
        :type cancel_booking_input20240813: CancelBookingInput20240813
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._bookings_controller20240813_cancel_booking_serialize(
            cal_api_version=cal_api_version,
            booking_uid=booking_uid,
            cancel_booking_input20240813=cancel_booking_input20240813,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CancelBookingOutput20240813",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def bookings_controller20240813_cancel_booking_with_http_info(
        self,
        cal_api_version: Annotated[StrictStr, Field(description="Must be set to `2024-08-13`")],
        booking_uid: StrictStr,
        cancel_booking_input20240813: CancelBookingInput20240813,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CancelBookingOutput20240813]:
        """Cancel a booking


        :param cal_api_version: Must be set to `2024-08-13` (required)
        :type cal_api_version: str
        :param booking_uid: (required)
        :type booking_uid: str
        :param cancel_booking_input20240813: (required)
        :type cancel_booking_input20240813: CancelBookingInput20240813
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._bookings_controller20240813_cancel_booking_serialize(
            cal_api_version=cal_api_version,
            booking_uid=booking_uid,
            cancel_booking_input20240813=cancel_booking_input20240813,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CancelBookingOutput20240813",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def bookings_controller20240813_cancel_booking_without_preload_content(
        self,
        cal_api_version: Annotated[StrictStr, Field(description="Must be set to `2024-08-13`")],
        booking_uid: StrictStr,
        cancel_booking_input20240813: CancelBookingInput20240813,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Cancel a booking


        :param cal_api_version: Must be set to `2024-08-13` (required)
        :type cal_api_version: str
        :param booking_uid: (required)
        :type booking_uid: str
        :param cancel_booking_input20240813: (required)
        :type cancel_booking_input20240813: CancelBookingInput20240813
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._bookings_controller20240813_cancel_booking_serialize(
            cal_api_version=cal_api_version,
            booking_uid=booking_uid,
            cancel_booking_input20240813=cancel_booking_input20240813,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CancelBookingOutput20240813",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _bookings_controller20240813_cancel_booking_serialize(
        self,
        cal_api_version,
        booking_uid,
        cancel_booking_input20240813,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if booking_uid is not None:
            _path_params['bookingUid'] = booking_uid
        # process the query parameters
        # process the header parameters
        if cal_api_version is not None:
            _header_params['cal-api-version'] = cal_api_version
        # process the form parameters
        # process the body parameter
        if cancel_booking_input20240813 is not None:
            _body_params = cancel_booking_input20240813


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v2/bookings/{bookingUid}/cancel',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def bookings_controller20240813_create_booking(
        self,
        cal_api_version: Annotated[StrictStr, Field(description="Must be set to `2024-08-13`")],
        bookings_controller20240813_create_booking_request: Annotated[BookingsController20240813CreateBookingRequest, Field(description="Accepts different types of booking input: CreateBookingInput_2024_08_13, CreateInstantBookingInput_2024_08_13, or CreateRecurringBookingInput_2024_08_13")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CreateBookingOutput20240813:
        """Create a booking

               POST /v2/bookings is used to create regular bookings, recurring bookings and instant bookings. The request bodies for all 3 are almost the same except:       If eventTypeId in the request body is id of a regular event, then regular booking is created.        If it is an id of a recurring event type, then recurring booking is created.        Meaning that the request bodies are equal but the outcome depends on what kind of event type it is with the goal of making it as seamless for developers as possible.        For team event types it is possible to create instant meeting. To do that just pass `\"instant\": true` to the request body.        The start needs to be in UTC aka if the timezone is GMT+2 in Rome and meeting should start at 11, then UTC time should have hours 09:00 aka without time zone.       

        :param cal_api_version: Must be set to `2024-08-13` (required)
        :type cal_api_version: str
        :param bookings_controller20240813_create_booking_request: Accepts different types of booking input: CreateBookingInput_2024_08_13, CreateInstantBookingInput_2024_08_13, or CreateRecurringBookingInput_2024_08_13 (required)
        :type bookings_controller20240813_create_booking_request: BookingsController20240813CreateBookingRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._bookings_controller20240813_create_booking_serialize(
            cal_api_version=cal_api_version,
            bookings_controller20240813_create_booking_request=bookings_controller20240813_create_booking_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateBookingOutput20240813",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def bookings_controller20240813_create_booking_with_http_info(
        self,
        cal_api_version: Annotated[StrictStr, Field(description="Must be set to `2024-08-13`")],
        bookings_controller20240813_create_booking_request: Annotated[BookingsController20240813CreateBookingRequest, Field(description="Accepts different types of booking input: CreateBookingInput_2024_08_13, CreateInstantBookingInput_2024_08_13, or CreateRecurringBookingInput_2024_08_13")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CreateBookingOutput20240813]:
        """Create a booking

               POST /v2/bookings is used to create regular bookings, recurring bookings and instant bookings. The request bodies for all 3 are almost the same except:       If eventTypeId in the request body is id of a regular event, then regular booking is created.        If it is an id of a recurring event type, then recurring booking is created.        Meaning that the request bodies are equal but the outcome depends on what kind of event type it is with the goal of making it as seamless for developers as possible.        For team event types it is possible to create instant meeting. To do that just pass `\"instant\": true` to the request body.        The start needs to be in UTC aka if the timezone is GMT+2 in Rome and meeting should start at 11, then UTC time should have hours 09:00 aka without time zone.       

        :param cal_api_version: Must be set to `2024-08-13` (required)
        :type cal_api_version: str
        :param bookings_controller20240813_create_booking_request: Accepts different types of booking input: CreateBookingInput_2024_08_13, CreateInstantBookingInput_2024_08_13, or CreateRecurringBookingInput_2024_08_13 (required)
        :type bookings_controller20240813_create_booking_request: BookingsController20240813CreateBookingRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._bookings_controller20240813_create_booking_serialize(
            cal_api_version=cal_api_version,
            bookings_controller20240813_create_booking_request=bookings_controller20240813_create_booking_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateBookingOutput20240813",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def bookings_controller20240813_create_booking_without_preload_content(
        self,
        cal_api_version: Annotated[StrictStr, Field(description="Must be set to `2024-08-13`")],
        bookings_controller20240813_create_booking_request: Annotated[BookingsController20240813CreateBookingRequest, Field(description="Accepts different types of booking input: CreateBookingInput_2024_08_13, CreateInstantBookingInput_2024_08_13, or CreateRecurringBookingInput_2024_08_13")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create a booking

               POST /v2/bookings is used to create regular bookings, recurring bookings and instant bookings. The request bodies for all 3 are almost the same except:       If eventTypeId in the request body is id of a regular event, then regular booking is created.        If it is an id of a recurring event type, then recurring booking is created.        Meaning that the request bodies are equal but the outcome depends on what kind of event type it is with the goal of making it as seamless for developers as possible.        For team event types it is possible to create instant meeting. To do that just pass `\"instant\": true` to the request body.        The start needs to be in UTC aka if the timezone is GMT+2 in Rome and meeting should start at 11, then UTC time should have hours 09:00 aka without time zone.       

        :param cal_api_version: Must be set to `2024-08-13` (required)
        :type cal_api_version: str
        :param bookings_controller20240813_create_booking_request: Accepts different types of booking input: CreateBookingInput_2024_08_13, CreateInstantBookingInput_2024_08_13, or CreateRecurringBookingInput_2024_08_13 (required)
        :type bookings_controller20240813_create_booking_request: BookingsController20240813CreateBookingRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._bookings_controller20240813_create_booking_serialize(
            cal_api_version=cal_api_version,
            bookings_controller20240813_create_booking_request=bookings_controller20240813_create_booking_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateBookingOutput20240813",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _bookings_controller20240813_create_booking_serialize(
        self,
        cal_api_version,
        bookings_controller20240813_create_booking_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if cal_api_version is not None:
            _header_params['cal-api-version'] = cal_api_version
        # process the form parameters
        # process the body parameter
        if bookings_controller20240813_create_booking_request is not None:
            _body_params = bookings_controller20240813_create_booking_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v2/bookings',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def bookings_controller20240813_get_booking(
        self,
        cal_api_version: Annotated[StrictStr, Field(description="Must be set to `2024-08-13`")],
        booking_uid: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetBookingOutput20240813:
        """Get a booking

        `:bookingUid` can be        1. uid of a normal booking        2. uid of one of the recurring booking recurrences        3. uid of recurring booking which will return an array of all recurring booking recurrences (stored as recurringBookingUid on one of the individual recurrences).

        :param cal_api_version: Must be set to `2024-08-13` (required)
        :type cal_api_version: str
        :param booking_uid: (required)
        :type booking_uid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._bookings_controller20240813_get_booking_serialize(
            cal_api_version=cal_api_version,
            booking_uid=booking_uid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetBookingOutput20240813",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def bookings_controller20240813_get_booking_with_http_info(
        self,
        cal_api_version: Annotated[StrictStr, Field(description="Must be set to `2024-08-13`")],
        booking_uid: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetBookingOutput20240813]:
        """Get a booking

        `:bookingUid` can be        1. uid of a normal booking        2. uid of one of the recurring booking recurrences        3. uid of recurring booking which will return an array of all recurring booking recurrences (stored as recurringBookingUid on one of the individual recurrences).

        :param cal_api_version: Must be set to `2024-08-13` (required)
        :type cal_api_version: str
        :param booking_uid: (required)
        :type booking_uid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._bookings_controller20240813_get_booking_serialize(
            cal_api_version=cal_api_version,
            booking_uid=booking_uid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetBookingOutput20240813",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def bookings_controller20240813_get_booking_without_preload_content(
        self,
        cal_api_version: Annotated[StrictStr, Field(description="Must be set to `2024-08-13`")],
        booking_uid: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get a booking

        `:bookingUid` can be        1. uid of a normal booking        2. uid of one of the recurring booking recurrences        3. uid of recurring booking which will return an array of all recurring booking recurrences (stored as recurringBookingUid on one of the individual recurrences).

        :param cal_api_version: Must be set to `2024-08-13` (required)
        :type cal_api_version: str
        :param booking_uid: (required)
        :type booking_uid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._bookings_controller20240813_get_booking_serialize(
            cal_api_version=cal_api_version,
            booking_uid=booking_uid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetBookingOutput20240813",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _bookings_controller20240813_get_booking_serialize(
        self,
        cal_api_version,
        booking_uid,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if booking_uid is not None:
            _path_params['bookingUid'] = booking_uid
        # process the query parameters
        # process the header parameters
        if cal_api_version is not None:
            _header_params['cal-api-version'] = cal_api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v2/bookings/{bookingUid}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def bookings_controller20240813_get_bookings(
        self,
        cal_api_version: Annotated[StrictStr, Field(description="Must be set to `2024-08-13`")],
        authorization: Annotated[StrictStr, Field(description="value must be `Bearer <token>` where `<token>` either managed user access token or api key prefixed with cal_")],
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter bookings by status. If you want to filter by multiple statuses, separate them with a comma.")] = None,
        attendee_email: Annotated[Optional[StrictStr], Field(description="Filter bookings by the attendee's email address.")] = None,
        attendee_name: Annotated[Optional[StrictStr], Field(description="Filter bookings by the attendee's name.")] = None,
        event_type_ids: Annotated[Optional[StrictStr], Field(description="Filter bookings by event type ids belonging to the user. Event type ids must be separated by a comma.")] = None,
        event_type_id: Annotated[Optional[StrictStr], Field(description="Filter bookings by event type id belonging to the user.")] = None,
        teams_ids: Annotated[Optional[StrictStr], Field(description="Filter bookings by team ids that user is part of. Team ids must be separated by a comma.")] = None,
        team_id: Annotated[Optional[StrictStr], Field(description="Filter bookings by team id that user is part of")] = None,
        after_start: Annotated[Optional[StrictStr], Field(description="Filter bookings with start after this date string.")] = None,
        before_end: Annotated[Optional[StrictStr], Field(description="Filter bookings with end before this date string.")] = None,
        sort_start: Annotated[Optional[StrictStr], Field(description="Sort results by their start time in ascending or descending order.")] = None,
        sort_end: Annotated[Optional[StrictStr], Field(description="Sort results by their end time in ascending or descending order.")] = None,
        sort_created: Annotated[Optional[StrictStr], Field(description="Sort results by their creation time (when booking was made) in ascending or descending order.")] = None,
        take: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The number of items to return")] = None,
        skip: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The number of items to skip")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetBookingsOutput20240813:
        """Get all bookings


        :param cal_api_version: Must be set to `2024-08-13` (required)
        :type cal_api_version: str
        :param authorization: value must be `Bearer <token>` where `<token>` either managed user access token or api key prefixed with cal_ (required)
        :type authorization: str
        :param status: Filter bookings by status. If you want to filter by multiple statuses, separate them with a comma.
        :type status: List[str]
        :param attendee_email: Filter bookings by the attendee's email address.
        :type attendee_email: str
        :param attendee_name: Filter bookings by the attendee's name.
        :type attendee_name: str
        :param event_type_ids: Filter bookings by event type ids belonging to the user. Event type ids must be separated by a comma.
        :type event_type_ids: str
        :param event_type_id: Filter bookings by event type id belonging to the user.
        :type event_type_id: str
        :param teams_ids: Filter bookings by team ids that user is part of. Team ids must be separated by a comma.
        :type teams_ids: str
        :param team_id: Filter bookings by team id that user is part of
        :type team_id: str
        :param after_start: Filter bookings with start after this date string.
        :type after_start: str
        :param before_end: Filter bookings with end before this date string.
        :type before_end: str
        :param sort_start: Sort results by their start time in ascending or descending order.
        :type sort_start: str
        :param sort_end: Sort results by their end time in ascending or descending order.
        :type sort_end: str
        :param sort_created: Sort results by their creation time (when booking was made) in ascending or descending order.
        :type sort_created: str
        :param take: The number of items to return
        :type take: float
        :param skip: The number of items to skip
        :type skip: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._bookings_controller20240813_get_bookings_serialize(
            cal_api_version=cal_api_version,
            authorization=authorization,
            status=status,
            attendee_email=attendee_email,
            attendee_name=attendee_name,
            event_type_ids=event_type_ids,
            event_type_id=event_type_id,
            teams_ids=teams_ids,
            team_id=team_id,
            after_start=after_start,
            before_end=before_end,
            sort_start=sort_start,
            sort_end=sort_end,
            sort_created=sort_created,
            take=take,
            skip=skip,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetBookingsOutput20240813",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def bookings_controller20240813_get_bookings_with_http_info(
        self,
        cal_api_version: Annotated[StrictStr, Field(description="Must be set to `2024-08-13`")],
        authorization: Annotated[StrictStr, Field(description="value must be `Bearer <token>` where `<token>` either managed user access token or api key prefixed with cal_")],
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter bookings by status. If you want to filter by multiple statuses, separate them with a comma.")] = None,
        attendee_email: Annotated[Optional[StrictStr], Field(description="Filter bookings by the attendee's email address.")] = None,
        attendee_name: Annotated[Optional[StrictStr], Field(description="Filter bookings by the attendee's name.")] = None,
        event_type_ids: Annotated[Optional[StrictStr], Field(description="Filter bookings by event type ids belonging to the user. Event type ids must be separated by a comma.")] = None,
        event_type_id: Annotated[Optional[StrictStr], Field(description="Filter bookings by event type id belonging to the user.")] = None,
        teams_ids: Annotated[Optional[StrictStr], Field(description="Filter bookings by team ids that user is part of. Team ids must be separated by a comma.")] = None,
        team_id: Annotated[Optional[StrictStr], Field(description="Filter bookings by team id that user is part of")] = None,
        after_start: Annotated[Optional[StrictStr], Field(description="Filter bookings with start after this date string.")] = None,
        before_end: Annotated[Optional[StrictStr], Field(description="Filter bookings with end before this date string.")] = None,
        sort_start: Annotated[Optional[StrictStr], Field(description="Sort results by their start time in ascending or descending order.")] = None,
        sort_end: Annotated[Optional[StrictStr], Field(description="Sort results by their end time in ascending or descending order.")] = None,
        sort_created: Annotated[Optional[StrictStr], Field(description="Sort results by their creation time (when booking was made) in ascending or descending order.")] = None,
        take: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The number of items to return")] = None,
        skip: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The number of items to skip")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetBookingsOutput20240813]:
        """Get all bookings


        :param cal_api_version: Must be set to `2024-08-13` (required)
        :type cal_api_version: str
        :param authorization: value must be `Bearer <token>` where `<token>` either managed user access token or api key prefixed with cal_ (required)
        :type authorization: str
        :param status: Filter bookings by status. If you want to filter by multiple statuses, separate them with a comma.
        :type status: List[str]
        :param attendee_email: Filter bookings by the attendee's email address.
        :type attendee_email: str
        :param attendee_name: Filter bookings by the attendee's name.
        :type attendee_name: str
        :param event_type_ids: Filter bookings by event type ids belonging to the user. Event type ids must be separated by a comma.
        :type event_type_ids: str
        :param event_type_id: Filter bookings by event type id belonging to the user.
        :type event_type_id: str
        :param teams_ids: Filter bookings by team ids that user is part of. Team ids must be separated by a comma.
        :type teams_ids: str
        :param team_id: Filter bookings by team id that user is part of
        :type team_id: str
        :param after_start: Filter bookings with start after this date string.
        :type after_start: str
        :param before_end: Filter bookings with end before this date string.
        :type before_end: str
        :param sort_start: Sort results by their start time in ascending or descending order.
        :type sort_start: str
        :param sort_end: Sort results by their end time in ascending or descending order.
        :type sort_end: str
        :param sort_created: Sort results by their creation time (when booking was made) in ascending or descending order.
        :type sort_created: str
        :param take: The number of items to return
        :type take: float
        :param skip: The number of items to skip
        :type skip: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._bookings_controller20240813_get_bookings_serialize(
            cal_api_version=cal_api_version,
            authorization=authorization,
            status=status,
            attendee_email=attendee_email,
            attendee_name=attendee_name,
            event_type_ids=event_type_ids,
            event_type_id=event_type_id,
            teams_ids=teams_ids,
            team_id=team_id,
            after_start=after_start,
            before_end=before_end,
            sort_start=sort_start,
            sort_end=sort_end,
            sort_created=sort_created,
            take=take,
            skip=skip,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetBookingsOutput20240813",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def bookings_controller20240813_get_bookings_without_preload_content(
        self,
        cal_api_version: Annotated[StrictStr, Field(description="Must be set to `2024-08-13`")],
        authorization: Annotated[StrictStr, Field(description="value must be `Bearer <token>` where `<token>` either managed user access token or api key prefixed with cal_")],
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter bookings by status. If you want to filter by multiple statuses, separate them with a comma.")] = None,
        attendee_email: Annotated[Optional[StrictStr], Field(description="Filter bookings by the attendee's email address.")] = None,
        attendee_name: Annotated[Optional[StrictStr], Field(description="Filter bookings by the attendee's name.")] = None,
        event_type_ids: Annotated[Optional[StrictStr], Field(description="Filter bookings by event type ids belonging to the user. Event type ids must be separated by a comma.")] = None,
        event_type_id: Annotated[Optional[StrictStr], Field(description="Filter bookings by event type id belonging to the user.")] = None,
        teams_ids: Annotated[Optional[StrictStr], Field(description="Filter bookings by team ids that user is part of. Team ids must be separated by a comma.")] = None,
        team_id: Annotated[Optional[StrictStr], Field(description="Filter bookings by team id that user is part of")] = None,
        after_start: Annotated[Optional[StrictStr], Field(description="Filter bookings with start after this date string.")] = None,
        before_end: Annotated[Optional[StrictStr], Field(description="Filter bookings with end before this date string.")] = None,
        sort_start: Annotated[Optional[StrictStr], Field(description="Sort results by their start time in ascending or descending order.")] = None,
        sort_end: Annotated[Optional[StrictStr], Field(description="Sort results by their end time in ascending or descending order.")] = None,
        sort_created: Annotated[Optional[StrictStr], Field(description="Sort results by their creation time (when booking was made) in ascending or descending order.")] = None,
        take: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The number of items to return")] = None,
        skip: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The number of items to skip")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get all bookings


        :param cal_api_version: Must be set to `2024-08-13` (required)
        :type cal_api_version: str
        :param authorization: value must be `Bearer <token>` where `<token>` either managed user access token or api key prefixed with cal_ (required)
        :type authorization: str
        :param status: Filter bookings by status. If you want to filter by multiple statuses, separate them with a comma.
        :type status: List[str]
        :param attendee_email: Filter bookings by the attendee's email address.
        :type attendee_email: str
        :param attendee_name: Filter bookings by the attendee's name.
        :type attendee_name: str
        :param event_type_ids: Filter bookings by event type ids belonging to the user. Event type ids must be separated by a comma.
        :type event_type_ids: str
        :param event_type_id: Filter bookings by event type id belonging to the user.
        :type event_type_id: str
        :param teams_ids: Filter bookings by team ids that user is part of. Team ids must be separated by a comma.
        :type teams_ids: str
        :param team_id: Filter bookings by team id that user is part of
        :type team_id: str
        :param after_start: Filter bookings with start after this date string.
        :type after_start: str
        :param before_end: Filter bookings with end before this date string.
        :type before_end: str
        :param sort_start: Sort results by their start time in ascending or descending order.
        :type sort_start: str
        :param sort_end: Sort results by their end time in ascending or descending order.
        :type sort_end: str
        :param sort_created: Sort results by their creation time (when booking was made) in ascending or descending order.
        :type sort_created: str
        :param take: The number of items to return
        :type take: float
        :param skip: The number of items to skip
        :type skip: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._bookings_controller20240813_get_bookings_serialize(
            cal_api_version=cal_api_version,
            authorization=authorization,
            status=status,
            attendee_email=attendee_email,
            attendee_name=attendee_name,
            event_type_ids=event_type_ids,
            event_type_id=event_type_id,
            teams_ids=teams_ids,
            team_id=team_id,
            after_start=after_start,
            before_end=before_end,
            sort_start=sort_start,
            sort_end=sort_end,
            sort_created=sort_created,
            take=take,
            skip=skip,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetBookingsOutput20240813",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _bookings_controller20240813_get_bookings_serialize(
        self,
        cal_api_version,
        authorization,
        status,
        attendee_email,
        attendee_name,
        event_type_ids,
        event_type_id,
        teams_ids,
        team_id,
        after_start,
        before_end,
        sort_start,
        sort_end,
        sort_created,
        take,
        skip,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'status': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if status is not None:
            
            _query_params.append(('status', status))
            
        if attendee_email is not None:
            
            _query_params.append(('attendeeEmail', attendee_email))
            
        if attendee_name is not None:
            
            _query_params.append(('attendeeName', attendee_name))
            
        if event_type_ids is not None:
            
            _query_params.append(('eventTypeIds', event_type_ids))
            
        if event_type_id is not None:
            
            _query_params.append(('eventTypeId', event_type_id))
            
        if teams_ids is not None:
            
            _query_params.append(('teamsIds', teams_ids))
            
        if team_id is not None:
            
            _query_params.append(('teamId', team_id))
            
        if after_start is not None:
            
            _query_params.append(('afterStart', after_start))
            
        if before_end is not None:
            
            _query_params.append(('beforeEnd', before_end))
            
        if sort_start is not None:
            
            _query_params.append(('sortStart', sort_start))
            
        if sort_end is not None:
            
            _query_params.append(('sortEnd', sort_end))
            
        if sort_created is not None:
            
            _query_params.append(('sortCreated', sort_created))
            
        if take is not None:
            
            _query_params.append(('take', take))
            
        if skip is not None:
            
            _query_params.append(('skip', skip))
            
        # process the header parameters
        if cal_api_version is not None:
            _header_params['cal-api-version'] = cal_api_version
        if authorization is not None:
            _header_params['Authorization'] = authorization
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v2/bookings',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def bookings_controller20240813_mark_no_show(
        self,
        cal_api_version: Annotated[StrictStr, Field(description="Must be set to `2024-08-13`")],
        booking_uid: StrictStr,
        authorization: Annotated[StrictStr, Field(description="value must be `Bearer <token>` where `<token>` either managed user access token or api key prefixed with cal_")],
        mark_absent_booking_input20240813: MarkAbsentBookingInput20240813,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> MarkAbsentBookingOutput20240813:
        """Mark a booking absence


        :param cal_api_version: Must be set to `2024-08-13` (required)
        :type cal_api_version: str
        :param booking_uid: (required)
        :type booking_uid: str
        :param authorization: value must be `Bearer <token>` where `<token>` either managed user access token or api key prefixed with cal_ (required)
        :type authorization: str
        :param mark_absent_booking_input20240813: (required)
        :type mark_absent_booking_input20240813: MarkAbsentBookingInput20240813
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._bookings_controller20240813_mark_no_show_serialize(
            cal_api_version=cal_api_version,
            booking_uid=booking_uid,
            authorization=authorization,
            mark_absent_booking_input20240813=mark_absent_booking_input20240813,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MarkAbsentBookingOutput20240813",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def bookings_controller20240813_mark_no_show_with_http_info(
        self,
        cal_api_version: Annotated[StrictStr, Field(description="Must be set to `2024-08-13`")],
        booking_uid: StrictStr,
        authorization: Annotated[StrictStr, Field(description="value must be `Bearer <token>` where `<token>` either managed user access token or api key prefixed with cal_")],
        mark_absent_booking_input20240813: MarkAbsentBookingInput20240813,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[MarkAbsentBookingOutput20240813]:
        """Mark a booking absence


        :param cal_api_version: Must be set to `2024-08-13` (required)
        :type cal_api_version: str
        :param booking_uid: (required)
        :type booking_uid: str
        :param authorization: value must be `Bearer <token>` where `<token>` either managed user access token or api key prefixed with cal_ (required)
        :type authorization: str
        :param mark_absent_booking_input20240813: (required)
        :type mark_absent_booking_input20240813: MarkAbsentBookingInput20240813
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._bookings_controller20240813_mark_no_show_serialize(
            cal_api_version=cal_api_version,
            booking_uid=booking_uid,
            authorization=authorization,
            mark_absent_booking_input20240813=mark_absent_booking_input20240813,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MarkAbsentBookingOutput20240813",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def bookings_controller20240813_mark_no_show_without_preload_content(
        self,
        cal_api_version: Annotated[StrictStr, Field(description="Must be set to `2024-08-13`")],
        booking_uid: StrictStr,
        authorization: Annotated[StrictStr, Field(description="value must be `Bearer <token>` where `<token>` either managed user access token or api key prefixed with cal_")],
        mark_absent_booking_input20240813: MarkAbsentBookingInput20240813,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Mark a booking absence


        :param cal_api_version: Must be set to `2024-08-13` (required)
        :type cal_api_version: str
        :param booking_uid: (required)
        :type booking_uid: str
        :param authorization: value must be `Bearer <token>` where `<token>` either managed user access token or api key prefixed with cal_ (required)
        :type authorization: str
        :param mark_absent_booking_input20240813: (required)
        :type mark_absent_booking_input20240813: MarkAbsentBookingInput20240813
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._bookings_controller20240813_mark_no_show_serialize(
            cal_api_version=cal_api_version,
            booking_uid=booking_uid,
            authorization=authorization,
            mark_absent_booking_input20240813=mark_absent_booking_input20240813,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MarkAbsentBookingOutput20240813",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _bookings_controller20240813_mark_no_show_serialize(
        self,
        cal_api_version,
        booking_uid,
        authorization,
        mark_absent_booking_input20240813,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if booking_uid is not None:
            _path_params['bookingUid'] = booking_uid
        # process the query parameters
        # process the header parameters
        if cal_api_version is not None:
            _header_params['cal-api-version'] = cal_api_version
        if authorization is not None:
            _header_params['Authorization'] = authorization
        # process the form parameters
        # process the body parameter
        if mark_absent_booking_input20240813 is not None:
            _body_params = mark_absent_booking_input20240813


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v2/bookings/{bookingUid}/mark-absent',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def bookings_controller20240813_reschedule_booking(
        self,
        cal_api_version: Annotated[StrictStr, Field(description="Must be set to `2024-08-13`")],
        booking_uid: StrictStr,
        reschedule_booking_input20240813: RescheduleBookingInput20240813,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RescheduleBookingOutput20240813:
        """Reschedule a booking

        Reschedule a booking by passing `:bookingUid` of the booking that should be rescheduled and pass request body with a new start time to create a new booking.

        :param cal_api_version: Must be set to `2024-08-13` (required)
        :type cal_api_version: str
        :param booking_uid: (required)
        :type booking_uid: str
        :param reschedule_booking_input20240813: (required)
        :type reschedule_booking_input20240813: RescheduleBookingInput20240813
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._bookings_controller20240813_reschedule_booking_serialize(
            cal_api_version=cal_api_version,
            booking_uid=booking_uid,
            reschedule_booking_input20240813=reschedule_booking_input20240813,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "RescheduleBookingOutput20240813",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def bookings_controller20240813_reschedule_booking_with_http_info(
        self,
        cal_api_version: Annotated[StrictStr, Field(description="Must be set to `2024-08-13`")],
        booking_uid: StrictStr,
        reschedule_booking_input20240813: RescheduleBookingInput20240813,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[RescheduleBookingOutput20240813]:
        """Reschedule a booking

        Reschedule a booking by passing `:bookingUid` of the booking that should be rescheduled and pass request body with a new start time to create a new booking.

        :param cal_api_version: Must be set to `2024-08-13` (required)
        :type cal_api_version: str
        :param booking_uid: (required)
        :type booking_uid: str
        :param reschedule_booking_input20240813: (required)
        :type reschedule_booking_input20240813: RescheduleBookingInput20240813
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._bookings_controller20240813_reschedule_booking_serialize(
            cal_api_version=cal_api_version,
            booking_uid=booking_uid,
            reschedule_booking_input20240813=reschedule_booking_input20240813,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "RescheduleBookingOutput20240813",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def bookings_controller20240813_reschedule_booking_without_preload_content(
        self,
        cal_api_version: Annotated[StrictStr, Field(description="Must be set to `2024-08-13`")],
        booking_uid: StrictStr,
        reschedule_booking_input20240813: RescheduleBookingInput20240813,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Reschedule a booking

        Reschedule a booking by passing `:bookingUid` of the booking that should be rescheduled and pass request body with a new start time to create a new booking.

        :param cal_api_version: Must be set to `2024-08-13` (required)
        :type cal_api_version: str
        :param booking_uid: (required)
        :type booking_uid: str
        :param reschedule_booking_input20240813: (required)
        :type reschedule_booking_input20240813: RescheduleBookingInput20240813
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._bookings_controller20240813_reschedule_booking_serialize(
            cal_api_version=cal_api_version,
            booking_uid=booking_uid,
            reschedule_booking_input20240813=reschedule_booking_input20240813,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "RescheduleBookingOutput20240813",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _bookings_controller20240813_reschedule_booking_serialize(
        self,
        cal_api_version,
        booking_uid,
        reschedule_booking_input20240813,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if booking_uid is not None:
            _path_params['bookingUid'] = booking_uid
        # process the query parameters
        # process the header parameters
        if cal_api_version is not None:
            _header_params['cal-api-version'] = cal_api_version
        # process the form parameters
        # process the body parameter
        if reschedule_booking_input20240813 is not None:
            _body_params = reschedule_booking_input20240813


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v2/bookings/{bookingUid}/reschedule',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


