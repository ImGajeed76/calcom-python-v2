# coding: utf-8

"""
    Cal.com API v2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictFloat, StrictInt, StrictStr
from typing import Optional, Union
from typing_extensions import Annotated
from openapi_client.models.create_event_type_input20240614 import CreateEventTypeInput20240614
from openapi_client.models.create_event_type_output20240614 import CreateEventTypeOutput20240614
from openapi_client.models.delete_event_type_output20240614 import DeleteEventTypeOutput20240614
from openapi_client.models.get_event_type_output20240614 import GetEventTypeOutput20240614
from openapi_client.models.get_event_types_output20240614 import GetEventTypesOutput20240614
from openapi_client.models.update_event_type_input20240614 import UpdateEventTypeInput20240614
from openapi_client.models.update_event_type_output20240614 import UpdateEventTypeOutput20240614

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class EventTypesApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def event_types_controller20240614_create_event_type(
        self,
        cal_api_version: Annotated[StrictStr, Field(description="Must be set to `2024-06-14`")],
        authorization: Annotated[StrictStr, Field(description="value must be `Bearer <token>` where `<token>` either managed user access token or api key prefixed with cal_")],
        create_event_type_input20240614: CreateEventTypeInput20240614,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CreateEventTypeOutput20240614:
        """Create an event type


        :param cal_api_version: Must be set to `2024-06-14` (required)
        :type cal_api_version: str
        :param authorization: value must be `Bearer <token>` where `<token>` either managed user access token or api key prefixed with cal_ (required)
        :type authorization: str
        :param create_event_type_input20240614: (required)
        :type create_event_type_input20240614: CreateEventTypeInput20240614
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._event_types_controller20240614_create_event_type_serialize(
            cal_api_version=cal_api_version,
            authorization=authorization,
            create_event_type_input20240614=create_event_type_input20240614,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateEventTypeOutput20240614",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def event_types_controller20240614_create_event_type_with_http_info(
        self,
        cal_api_version: Annotated[StrictStr, Field(description="Must be set to `2024-06-14`")],
        authorization: Annotated[StrictStr, Field(description="value must be `Bearer <token>` where `<token>` either managed user access token or api key prefixed with cal_")],
        create_event_type_input20240614: CreateEventTypeInput20240614,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CreateEventTypeOutput20240614]:
        """Create an event type


        :param cal_api_version: Must be set to `2024-06-14` (required)
        :type cal_api_version: str
        :param authorization: value must be `Bearer <token>` where `<token>` either managed user access token or api key prefixed with cal_ (required)
        :type authorization: str
        :param create_event_type_input20240614: (required)
        :type create_event_type_input20240614: CreateEventTypeInput20240614
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._event_types_controller20240614_create_event_type_serialize(
            cal_api_version=cal_api_version,
            authorization=authorization,
            create_event_type_input20240614=create_event_type_input20240614,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateEventTypeOutput20240614",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def event_types_controller20240614_create_event_type_without_preload_content(
        self,
        cal_api_version: Annotated[StrictStr, Field(description="Must be set to `2024-06-14`")],
        authorization: Annotated[StrictStr, Field(description="value must be `Bearer <token>` where `<token>` either managed user access token or api key prefixed with cal_")],
        create_event_type_input20240614: CreateEventTypeInput20240614,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create an event type


        :param cal_api_version: Must be set to `2024-06-14` (required)
        :type cal_api_version: str
        :param authorization: value must be `Bearer <token>` where `<token>` either managed user access token or api key prefixed with cal_ (required)
        :type authorization: str
        :param create_event_type_input20240614: (required)
        :type create_event_type_input20240614: CreateEventTypeInput20240614
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._event_types_controller20240614_create_event_type_serialize(
            cal_api_version=cal_api_version,
            authorization=authorization,
            create_event_type_input20240614=create_event_type_input20240614,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateEventTypeOutput20240614",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _event_types_controller20240614_create_event_type_serialize(
        self,
        cal_api_version,
        authorization,
        create_event_type_input20240614,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if cal_api_version is not None:
            _header_params['cal-api-version'] = cal_api_version
        if authorization is not None:
            _header_params['Authorization'] = authorization
        # process the form parameters
        # process the body parameter
        if create_event_type_input20240614 is not None:
            _body_params = create_event_type_input20240614


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v2/event-types',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def event_types_controller20240614_delete_event_type(
        self,
        cal_api_version: Annotated[StrictStr, Field(description="Must be set to `2024-06-14`")],
        event_type_id: Union[StrictFloat, StrictInt],
        authorization: Annotated[StrictStr, Field(description="value must be `Bearer <token>` where `<token>` either managed user access token or api key prefixed with cal_")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DeleteEventTypeOutput20240614:
        """Delete an event type


        :param cal_api_version: Must be set to `2024-06-14` (required)
        :type cal_api_version: str
        :param event_type_id: (required)
        :type event_type_id: float
        :param authorization: value must be `Bearer <token>` where `<token>` either managed user access token or api key prefixed with cal_ (required)
        :type authorization: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._event_types_controller20240614_delete_event_type_serialize(
            cal_api_version=cal_api_version,
            event_type_id=event_type_id,
            authorization=authorization,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeleteEventTypeOutput20240614",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def event_types_controller20240614_delete_event_type_with_http_info(
        self,
        cal_api_version: Annotated[StrictStr, Field(description="Must be set to `2024-06-14`")],
        event_type_id: Union[StrictFloat, StrictInt],
        authorization: Annotated[StrictStr, Field(description="value must be `Bearer <token>` where `<token>` either managed user access token or api key prefixed with cal_")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DeleteEventTypeOutput20240614]:
        """Delete an event type


        :param cal_api_version: Must be set to `2024-06-14` (required)
        :type cal_api_version: str
        :param event_type_id: (required)
        :type event_type_id: float
        :param authorization: value must be `Bearer <token>` where `<token>` either managed user access token or api key prefixed with cal_ (required)
        :type authorization: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._event_types_controller20240614_delete_event_type_serialize(
            cal_api_version=cal_api_version,
            event_type_id=event_type_id,
            authorization=authorization,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeleteEventTypeOutput20240614",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def event_types_controller20240614_delete_event_type_without_preload_content(
        self,
        cal_api_version: Annotated[StrictStr, Field(description="Must be set to `2024-06-14`")],
        event_type_id: Union[StrictFloat, StrictInt],
        authorization: Annotated[StrictStr, Field(description="value must be `Bearer <token>` where `<token>` either managed user access token or api key prefixed with cal_")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete an event type


        :param cal_api_version: Must be set to `2024-06-14` (required)
        :type cal_api_version: str
        :param event_type_id: (required)
        :type event_type_id: float
        :param authorization: value must be `Bearer <token>` where `<token>` either managed user access token or api key prefixed with cal_ (required)
        :type authorization: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._event_types_controller20240614_delete_event_type_serialize(
            cal_api_version=cal_api_version,
            event_type_id=event_type_id,
            authorization=authorization,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeleteEventTypeOutput20240614",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _event_types_controller20240614_delete_event_type_serialize(
        self,
        cal_api_version,
        event_type_id,
        authorization,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if event_type_id is not None:
            _path_params['eventTypeId'] = event_type_id
        # process the query parameters
        # process the header parameters
        if cal_api_version is not None:
            _header_params['cal-api-version'] = cal_api_version
        if authorization is not None:
            _header_params['Authorization'] = authorization
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/v2/event-types/{eventTypeId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def event_types_controller20240614_get_event_type_by_id(
        self,
        cal_api_version: Annotated[StrictStr, Field(description="Must be set to `2024-06-14`")],
        event_type_id: StrictStr,
        authorization: Annotated[StrictStr, Field(description="value must be `Bearer <token>` where `<token>` either managed user access token or api key prefixed with cal_")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetEventTypeOutput20240614:
        """Get an event type


        :param cal_api_version: Must be set to `2024-06-14` (required)
        :type cal_api_version: str
        :param event_type_id: (required)
        :type event_type_id: str
        :param authorization: value must be `Bearer <token>` where `<token>` either managed user access token or api key prefixed with cal_ (required)
        :type authorization: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._event_types_controller20240614_get_event_type_by_id_serialize(
            cal_api_version=cal_api_version,
            event_type_id=event_type_id,
            authorization=authorization,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetEventTypeOutput20240614",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def event_types_controller20240614_get_event_type_by_id_with_http_info(
        self,
        cal_api_version: Annotated[StrictStr, Field(description="Must be set to `2024-06-14`")],
        event_type_id: StrictStr,
        authorization: Annotated[StrictStr, Field(description="value must be `Bearer <token>` where `<token>` either managed user access token or api key prefixed with cal_")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetEventTypeOutput20240614]:
        """Get an event type


        :param cal_api_version: Must be set to `2024-06-14` (required)
        :type cal_api_version: str
        :param event_type_id: (required)
        :type event_type_id: str
        :param authorization: value must be `Bearer <token>` where `<token>` either managed user access token or api key prefixed with cal_ (required)
        :type authorization: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._event_types_controller20240614_get_event_type_by_id_serialize(
            cal_api_version=cal_api_version,
            event_type_id=event_type_id,
            authorization=authorization,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetEventTypeOutput20240614",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def event_types_controller20240614_get_event_type_by_id_without_preload_content(
        self,
        cal_api_version: Annotated[StrictStr, Field(description="Must be set to `2024-06-14`")],
        event_type_id: StrictStr,
        authorization: Annotated[StrictStr, Field(description="value must be `Bearer <token>` where `<token>` either managed user access token or api key prefixed with cal_")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get an event type


        :param cal_api_version: Must be set to `2024-06-14` (required)
        :type cal_api_version: str
        :param event_type_id: (required)
        :type event_type_id: str
        :param authorization: value must be `Bearer <token>` where `<token>` either managed user access token or api key prefixed with cal_ (required)
        :type authorization: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._event_types_controller20240614_get_event_type_by_id_serialize(
            cal_api_version=cal_api_version,
            event_type_id=event_type_id,
            authorization=authorization,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetEventTypeOutput20240614",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _event_types_controller20240614_get_event_type_by_id_serialize(
        self,
        cal_api_version,
        event_type_id,
        authorization,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if event_type_id is not None:
            _path_params['eventTypeId'] = event_type_id
        # process the query parameters
        # process the header parameters
        if cal_api_version is not None:
            _header_params['cal-api-version'] = cal_api_version
        if authorization is not None:
            _header_params['Authorization'] = authorization
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v2/event-types/{eventTypeId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def event_types_controller20240614_get_event_types(
        self,
        cal_api_version: Annotated[StrictStr, Field(description="Must be set to `2024-06-14`")],
        username: Annotated[Optional[StrictStr], Field(description="The username of the user to get event types for. If only username provided will get all event types.")] = None,
        event_slug: Annotated[Optional[StrictStr], Field(description="Slug of event type to return. Notably, if eventSlug is provided then username must be provided too, because multiple users can have event with same slug.")] = None,
        usernames: Annotated[Optional[StrictStr], Field(description="Get dynamic event type for multiple usernames separated by comma. e.g `usernames=alice,bob`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetEventTypesOutput20240614:
        """Get all event types


        :param cal_api_version: Must be set to `2024-06-14` (required)
        :type cal_api_version: str
        :param username: The username of the user to get event types for. If only username provided will get all event types.
        :type username: str
        :param event_slug: Slug of event type to return. Notably, if eventSlug is provided then username must be provided too, because multiple users can have event with same slug.
        :type event_slug: str
        :param usernames: Get dynamic event type for multiple usernames separated by comma. e.g `usernames=alice,bob`
        :type usernames: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._event_types_controller20240614_get_event_types_serialize(
            cal_api_version=cal_api_version,
            username=username,
            event_slug=event_slug,
            usernames=usernames,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetEventTypesOutput20240614",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def event_types_controller20240614_get_event_types_with_http_info(
        self,
        cal_api_version: Annotated[StrictStr, Field(description="Must be set to `2024-06-14`")],
        username: Annotated[Optional[StrictStr], Field(description="The username of the user to get event types for. If only username provided will get all event types.")] = None,
        event_slug: Annotated[Optional[StrictStr], Field(description="Slug of event type to return. Notably, if eventSlug is provided then username must be provided too, because multiple users can have event with same slug.")] = None,
        usernames: Annotated[Optional[StrictStr], Field(description="Get dynamic event type for multiple usernames separated by comma. e.g `usernames=alice,bob`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetEventTypesOutput20240614]:
        """Get all event types


        :param cal_api_version: Must be set to `2024-06-14` (required)
        :type cal_api_version: str
        :param username: The username of the user to get event types for. If only username provided will get all event types.
        :type username: str
        :param event_slug: Slug of event type to return. Notably, if eventSlug is provided then username must be provided too, because multiple users can have event with same slug.
        :type event_slug: str
        :param usernames: Get dynamic event type for multiple usernames separated by comma. e.g `usernames=alice,bob`
        :type usernames: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._event_types_controller20240614_get_event_types_serialize(
            cal_api_version=cal_api_version,
            username=username,
            event_slug=event_slug,
            usernames=usernames,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetEventTypesOutput20240614",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def event_types_controller20240614_get_event_types_without_preload_content(
        self,
        cal_api_version: Annotated[StrictStr, Field(description="Must be set to `2024-06-14`")],
        username: Annotated[Optional[StrictStr], Field(description="The username of the user to get event types for. If only username provided will get all event types.")] = None,
        event_slug: Annotated[Optional[StrictStr], Field(description="Slug of event type to return. Notably, if eventSlug is provided then username must be provided too, because multiple users can have event with same slug.")] = None,
        usernames: Annotated[Optional[StrictStr], Field(description="Get dynamic event type for multiple usernames separated by comma. e.g `usernames=alice,bob`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get all event types


        :param cal_api_version: Must be set to `2024-06-14` (required)
        :type cal_api_version: str
        :param username: The username of the user to get event types for. If only username provided will get all event types.
        :type username: str
        :param event_slug: Slug of event type to return. Notably, if eventSlug is provided then username must be provided too, because multiple users can have event with same slug.
        :type event_slug: str
        :param usernames: Get dynamic event type for multiple usernames separated by comma. e.g `usernames=alice,bob`
        :type usernames: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._event_types_controller20240614_get_event_types_serialize(
            cal_api_version=cal_api_version,
            username=username,
            event_slug=event_slug,
            usernames=usernames,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetEventTypesOutput20240614",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _event_types_controller20240614_get_event_types_serialize(
        self,
        cal_api_version,
        username,
        event_slug,
        usernames,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if username is not None:
            
            _query_params.append(('username', username))
            
        if event_slug is not None:
            
            _query_params.append(('eventSlug', event_slug))
            
        if usernames is not None:
            
            _query_params.append(('usernames', usernames))
            
        # process the header parameters
        if cal_api_version is not None:
            _header_params['cal-api-version'] = cal_api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v2/event-types',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def event_types_controller20240614_update_event_type(
        self,
        cal_api_version: Annotated[StrictStr, Field(description="Must be set to `2024-06-14`")],
        event_type_id: Union[StrictFloat, StrictInt],
        authorization: Annotated[StrictStr, Field(description="value must be `Bearer <token>` where `<token>` either managed user access token or api key prefixed with cal_")],
        update_event_type_input20240614: UpdateEventTypeInput20240614,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> UpdateEventTypeOutput20240614:
        """Update an event type


        :param cal_api_version: Must be set to `2024-06-14` (required)
        :type cal_api_version: str
        :param event_type_id: (required)
        :type event_type_id: float
        :param authorization: value must be `Bearer <token>` where `<token>` either managed user access token or api key prefixed with cal_ (required)
        :type authorization: str
        :param update_event_type_input20240614: (required)
        :type update_event_type_input20240614: UpdateEventTypeInput20240614
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._event_types_controller20240614_update_event_type_serialize(
            cal_api_version=cal_api_version,
            event_type_id=event_type_id,
            authorization=authorization,
            update_event_type_input20240614=update_event_type_input20240614,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UpdateEventTypeOutput20240614",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def event_types_controller20240614_update_event_type_with_http_info(
        self,
        cal_api_version: Annotated[StrictStr, Field(description="Must be set to `2024-06-14`")],
        event_type_id: Union[StrictFloat, StrictInt],
        authorization: Annotated[StrictStr, Field(description="value must be `Bearer <token>` where `<token>` either managed user access token or api key prefixed with cal_")],
        update_event_type_input20240614: UpdateEventTypeInput20240614,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[UpdateEventTypeOutput20240614]:
        """Update an event type


        :param cal_api_version: Must be set to `2024-06-14` (required)
        :type cal_api_version: str
        :param event_type_id: (required)
        :type event_type_id: float
        :param authorization: value must be `Bearer <token>` where `<token>` either managed user access token or api key prefixed with cal_ (required)
        :type authorization: str
        :param update_event_type_input20240614: (required)
        :type update_event_type_input20240614: UpdateEventTypeInput20240614
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._event_types_controller20240614_update_event_type_serialize(
            cal_api_version=cal_api_version,
            event_type_id=event_type_id,
            authorization=authorization,
            update_event_type_input20240614=update_event_type_input20240614,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UpdateEventTypeOutput20240614",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def event_types_controller20240614_update_event_type_without_preload_content(
        self,
        cal_api_version: Annotated[StrictStr, Field(description="Must be set to `2024-06-14`")],
        event_type_id: Union[StrictFloat, StrictInt],
        authorization: Annotated[StrictStr, Field(description="value must be `Bearer <token>` where `<token>` either managed user access token or api key prefixed with cal_")],
        update_event_type_input20240614: UpdateEventTypeInput20240614,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Update an event type


        :param cal_api_version: Must be set to `2024-06-14` (required)
        :type cal_api_version: str
        :param event_type_id: (required)
        :type event_type_id: float
        :param authorization: value must be `Bearer <token>` where `<token>` either managed user access token or api key prefixed with cal_ (required)
        :type authorization: str
        :param update_event_type_input20240614: (required)
        :type update_event_type_input20240614: UpdateEventTypeInput20240614
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._event_types_controller20240614_update_event_type_serialize(
            cal_api_version=cal_api_version,
            event_type_id=event_type_id,
            authorization=authorization,
            update_event_type_input20240614=update_event_type_input20240614,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UpdateEventTypeOutput20240614",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _event_types_controller20240614_update_event_type_serialize(
        self,
        cal_api_version,
        event_type_id,
        authorization,
        update_event_type_input20240614,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if event_type_id is not None:
            _path_params['eventTypeId'] = event_type_id
        # process the query parameters
        # process the header parameters
        if cal_api_version is not None:
            _header_params['cal-api-version'] = cal_api_version
        if authorization is not None:
            _header_params['Authorization'] = authorization
        # process the form parameters
        # process the body parameter
        if update_event_type_input20240614 is not None:
            _body_params = update_event_type_input20240614


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/v2/event-types/{eventTypeId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


