# coding: utf-8

"""
    Cal.com API v2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.attendee import Attendee
from typing import Optional, Set
from typing_extensions import Self

class CreateBookingInput20240813(BaseModel):
    """
    CreateBookingInput20240813
    """ # noqa: E501
    start: StrictStr = Field(description="The start time of the booking in ISO 8601 format in UTC timezone.")
    event_type_id: Union[StrictFloat, StrictInt] = Field(description="The ID of the event type that is booked.", alias="eventTypeId")
    attendee: Attendee = Field(description="The attendee's details.")
    guests: Optional[List[StrictStr]] = Field(default=None, description="An optional list of guest emails attending the event.")
    meeting_url: Optional[StrictStr] = Field(default=None, description="Deprecated - use 'location' instead. Meeting URL just for this booking. Displayed in email and calendar event. If not provided then cal video link will be generated.", alias="meetingUrl")
    location: Optional[StrictStr] = Field(default=None, description="Location for this booking. Displayed in email and calendar event.")
    booking_fields_responses: Optional[Dict[str, Any]] = Field(default=None, description="Booking field responses consisting of an object with booking field slug as keys and user response as values.", alias="bookingFieldsResponses")
    __properties: ClassVar[List[str]] = ["start", "eventTypeId", "attendee", "guests", "meetingUrl", "location", "bookingFieldsResponses"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateBookingInput20240813 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of attendee
        if self.attendee:
            _dict['attendee'] = self.attendee.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateBookingInput20240813 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "start": obj.get("start"),
            "eventTypeId": obj.get("eventTypeId"),
            "attendee": Attendee.from_dict(obj["attendee"]) if obj.get("attendee") is not None else None,
            "guests": obj.get("guests"),
            "meetingUrl": obj.get("meetingUrl"),
            "location": obj.get("location"),
            "bookingFieldsResponses": obj.get("bookingFieldsResponses")
        })
        return _obj


