# coding: utf-8

"""
    Cal.com API v2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.attendee import Attendee
from openapi_client.models.event_type import EventType
from openapi_client.models.host import Host
from typing import Optional, Set
from typing_extensions import Self

class RecurringBookingOutput20240813(BaseModel):
    """
    RecurringBookingOutput20240813
    """ # noqa: E501
    id: Union[StrictFloat, StrictInt]
    uid: StrictStr
    title: StrictStr
    description: StrictStr
    hosts: List[Host]
    status: StrictStr
    cancellation_reason: Optional[StrictStr] = Field(default=None, alias="cancellationReason")
    rescheduling_reason: Optional[StrictStr] = Field(default=None, alias="reschedulingReason")
    rescheduled_from_uid: Optional[StrictStr] = Field(default=None, alias="rescheduledFromUid")
    start: StrictStr
    end: StrictStr
    duration: Union[StrictFloat, StrictInt]
    event_type_id: Union[StrictFloat, StrictInt] = Field(description="Deprecated - rely on 'eventType' object containing the id instead.", alias="eventTypeId")
    event_type: EventType = Field(alias="eventType")
    recurring_booking_uid: StrictStr = Field(alias="recurringBookingUid")
    attendees: List[Attendee]
    guests: Optional[List[StrictStr]] = None
    meeting_url: Optional[StrictStr] = Field(default=None, description="Deprecated - rely on 'location' field instead.", alias="meetingUrl")
    location: Optional[StrictStr] = None
    absent_host: StrictBool = Field(alias="absentHost")
    booking_fields_responses: Optional[Dict[str, Any]] = Field(default=None, description="Booking field responses consisting of an object with booking field slug as keys and user response as values.", alias="bookingFieldsResponses")
    __properties: ClassVar[List[str]] = ["id", "uid", "title", "description", "hosts", "status", "cancellationReason", "reschedulingReason", "rescheduledFromUid", "start", "end", "duration", "eventTypeId", "eventType", "recurringBookingUid", "attendees", "guests", "meetingUrl", "location", "absentHost", "bookingFieldsResponses"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['cancelled', 'accepted', 'rejected', 'pending']):
            raise ValueError("must be one of enum values ('cancelled', 'accepted', 'rejected', 'pending')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RecurringBookingOutput20240813 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in hosts (list)
        _items = []
        if self.hosts:
            for _item_hosts in self.hosts:
                if _item_hosts:
                    _items.append(_item_hosts.to_dict())
            _dict['hosts'] = _items
        # override the default output from pydantic by calling `to_dict()` of event_type
        if self.event_type:
            _dict['eventType'] = self.event_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in attendees (list)
        _items = []
        if self.attendees:
            for _item_attendees in self.attendees:
                if _item_attendees:
                    _items.append(_item_attendees.to_dict())
            _dict['attendees'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RecurringBookingOutput20240813 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "uid": obj.get("uid"),
            "title": obj.get("title"),
            "description": obj.get("description"),
            "hosts": [Host.from_dict(_item) for _item in obj["hosts"]] if obj.get("hosts") is not None else None,
            "status": obj.get("status"),
            "cancellationReason": obj.get("cancellationReason"),
            "reschedulingReason": obj.get("reschedulingReason"),
            "rescheduledFromUid": obj.get("rescheduledFromUid"),
            "start": obj.get("start"),
            "end": obj.get("end"),
            "duration": obj.get("duration"),
            "eventTypeId": obj.get("eventTypeId"),
            "eventType": EventType.from_dict(obj["eventType"]) if obj.get("eventType") is not None else None,
            "recurringBookingUid": obj.get("recurringBookingUid"),
            "attendees": [Attendee.from_dict(_item) for _item in obj["attendees"]] if obj.get("attendees") is not None else None,
            "guests": obj.get("guests"),
            "meetingUrl": obj.get("meetingUrl"),
            "location": obj.get("location"),
            "absentHost": obj.get("absentHost"),
            "bookingFieldsResponses": obj.get("bookingFieldsResponses")
        })
        return _obj


