# coding: utf-8

"""
    Cal.com API v2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class UpdateManagedUserInput(BaseModel):
    """
    UpdateManagedUserInput
    """ # noqa: E501
    time_format: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Must be 12 or 24", alias="timeFormat")
    week_start: Optional[StrictStr] = Field(default=None, alias="weekStart")
    locale: Optional[StrictStr] = None
    email: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    default_schedule_id: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="defaultScheduleId")
    time_zone: Optional[StrictStr] = Field(default=None, alias="timeZone")
    __properties: ClassVar[List[str]] = ["timeFormat", "weekStart", "locale", "email", "name", "defaultScheduleId", "timeZone"]

    @field_validator('time_format')
    def time_format_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set([12, 24]):
            raise ValueError("must be one of enum values (12, 24)")
        return value

    @field_validator('week_start')
    def week_start_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']):
            raise ValueError("must be one of enum values ('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday')")
        return value

    @field_validator('locale')
    def locale_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ar', 'ca', 'de', 'es', 'eu', 'he', 'id', 'ja', 'lv', 'pl', 'ro', 'sr', 'th', 'vi', 'az', 'cs', 'el', 'es-419', 'fi', 'hr', 'it', 'km', 'nl', 'pt', 'ru', 'sv', 'tr', 'zh-CN', 'bg', 'da', 'en', 'et', 'fr', 'hu', 'iw', 'ko', 'no', 'pt-BR', 'sk', 'ta', 'uk', 'zh-TW']):
            raise ValueError("must be one of enum values ('ar', 'ca', 'de', 'es', 'eu', 'he', 'id', 'ja', 'lv', 'pl', 'ro', 'sr', 'th', 'vi', 'az', 'cs', 'el', 'es-419', 'fi', 'hr', 'it', 'km', 'nl', 'pt', 'ru', 'sv', 'tr', 'zh-CN', 'bg', 'da', 'en', 'et', 'fr', 'hu', 'iw', 'ko', 'no', 'pt-BR', 'sk', 'ta', 'uk', 'zh-TW')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateManagedUserInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateManagedUserInput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "timeFormat": obj.get("timeFormat"),
            "weekStart": obj.get("weekStart"),
            "locale": obj.get("locale"),
            "email": obj.get("email"),
            "name": obj.get("name"),
            "defaultScheduleId": obj.get("defaultScheduleId"),
            "timeZone": obj.get("timeZone")
        })
        return _obj


