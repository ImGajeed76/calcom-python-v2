# coding: utf-8

"""
    Cal.com API v2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class DestinationCalendar(BaseModel):
    """
    DestinationCalendar
    """ # noqa: E501
    id: Union[StrictFloat, StrictInt]
    integration: StrictStr
    external_id: StrictStr = Field(alias="externalId")
    primary_email: Optional[StrictStr] = Field(alias="primaryEmail")
    user_id: Optional[Union[StrictFloat, StrictInt]] = Field(alias="userId")
    event_type_id: Optional[Union[StrictFloat, StrictInt]] = Field(alias="eventTypeId")
    credential_id: Optional[Union[StrictFloat, StrictInt]] = Field(alias="credentialId")
    name: Optional[StrictStr] = None
    primary: Optional[StrictBool] = None
    read_only: Optional[StrictBool] = Field(default=None, alias="readOnly")
    email: Optional[StrictStr] = None
    integration_title: Optional[StrictStr] = Field(default=None, alias="integrationTitle")
    __properties: ClassVar[List[str]] = ["id", "integration", "externalId", "primaryEmail", "userId", "eventTypeId", "credentialId", "name", "primary", "readOnly", "email", "integrationTitle"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DestinationCalendar from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if primary_email (nullable) is None
        # and model_fields_set contains the field
        if self.primary_email is None and "primary_email" in self.model_fields_set:
            _dict['primaryEmail'] = None

        # set to None if user_id (nullable) is None
        # and model_fields_set contains the field
        if self.user_id is None and "user_id" in self.model_fields_set:
            _dict['userId'] = None

        # set to None if event_type_id (nullable) is None
        # and model_fields_set contains the field
        if self.event_type_id is None and "event_type_id" in self.model_fields_set:
            _dict['eventTypeId'] = None

        # set to None if credential_id (nullable) is None
        # and model_fields_set contains the field
        if self.credential_id is None and "credential_id" in self.model_fields_set:
            _dict['credentialId'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DestinationCalendar from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "integration": obj.get("integration"),
            "externalId": obj.get("externalId"),
            "primaryEmail": obj.get("primaryEmail"),
            "userId": obj.get("userId"),
            "eventTypeId": obj.get("eventTypeId"),
            "credentialId": obj.get("credentialId"),
            "name": obj.get("name"),
            "primary": obj.get("primary"),
            "readOnly": obj.get("readOnly"),
            "email": obj.get("email"),
            "integrationTitle": obj.get("integrationTitle")
        })
        return _obj


