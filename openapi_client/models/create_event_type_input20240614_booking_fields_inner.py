# coding: utf-8

"""
    Cal.com API v2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from openapi_client.models.address_field_input20240614 import AddressFieldInput20240614
from openapi_client.models.boolean_field_input20240614 import BooleanFieldInput20240614
from openapi_client.models.checkbox_group_field_input20240614 import CheckboxGroupFieldInput20240614
from openapi_client.models.multi_email_field_input20240614 import MultiEmailFieldInput20240614
from openapi_client.models.multi_select_field_input20240614 import MultiSelectFieldInput20240614
from openapi_client.models.number_field_input20240614 import NumberFieldInput20240614
from openapi_client.models.phone_field_input20240614 import PhoneFieldInput20240614
from openapi_client.models.radio_group_field_input20240614 import RadioGroupFieldInput20240614
from openapi_client.models.select_field_input20240614 import SelectFieldInput20240614
from openapi_client.models.text_area_field_input20240614 import TextAreaFieldInput20240614
from openapi_client.models.text_field_input20240614 import TextFieldInput20240614
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

CREATEEVENTTYPEINPUT20240614BOOKINGFIELDSINNER_ONE_OF_SCHEMAS = ["AddressFieldInput20240614", "BooleanFieldInput20240614", "CheckboxGroupFieldInput20240614", "MultiEmailFieldInput20240614", "MultiSelectFieldInput20240614", "NumberFieldInput20240614", "PhoneFieldInput20240614", "RadioGroupFieldInput20240614", "SelectFieldInput20240614", "TextAreaFieldInput20240614", "TextFieldInput20240614"]

class CreateEventTypeInput20240614BookingFieldsInner(BaseModel):
    """
    CreateEventTypeInput20240614BookingFieldsInner
    """
    # data type: PhoneFieldInput20240614
    oneof_schema_1_validator: Optional[PhoneFieldInput20240614] = None
    # data type: AddressFieldInput20240614
    oneof_schema_2_validator: Optional[AddressFieldInput20240614] = None
    # data type: TextFieldInput20240614
    oneof_schema_3_validator: Optional[TextFieldInput20240614] = None
    # data type: NumberFieldInput20240614
    oneof_schema_4_validator: Optional[NumberFieldInput20240614] = None
    # data type: TextAreaFieldInput20240614
    oneof_schema_5_validator: Optional[TextAreaFieldInput20240614] = None
    # data type: SelectFieldInput20240614
    oneof_schema_6_validator: Optional[SelectFieldInput20240614] = None
    # data type: MultiSelectFieldInput20240614
    oneof_schema_7_validator: Optional[MultiSelectFieldInput20240614] = None
    # data type: MultiEmailFieldInput20240614
    oneof_schema_8_validator: Optional[MultiEmailFieldInput20240614] = None
    # data type: CheckboxGroupFieldInput20240614
    oneof_schema_9_validator: Optional[CheckboxGroupFieldInput20240614] = None
    # data type: RadioGroupFieldInput20240614
    oneof_schema_10_validator: Optional[RadioGroupFieldInput20240614] = None
    # data type: BooleanFieldInput20240614
    oneof_schema_11_validator: Optional[BooleanFieldInput20240614] = None
    actual_instance: Optional[Union[AddressFieldInput20240614, BooleanFieldInput20240614, CheckboxGroupFieldInput20240614, MultiEmailFieldInput20240614, MultiSelectFieldInput20240614, NumberFieldInput20240614, PhoneFieldInput20240614, RadioGroupFieldInput20240614, SelectFieldInput20240614, TextAreaFieldInput20240614, TextFieldInput20240614]] = None
    one_of_schemas: Set[str] = { "AddressFieldInput20240614", "BooleanFieldInput20240614", "CheckboxGroupFieldInput20240614", "MultiEmailFieldInput20240614", "MultiSelectFieldInput20240614", "NumberFieldInput20240614", "PhoneFieldInput20240614", "RadioGroupFieldInput20240614", "SelectFieldInput20240614", "TextAreaFieldInput20240614", "TextFieldInput20240614" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = CreateEventTypeInput20240614BookingFieldsInner.model_construct()
        error_messages = []
        match = 0
        # validate data type: PhoneFieldInput20240614
        if not isinstance(v, PhoneFieldInput20240614):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PhoneFieldInput20240614`")
        else:
            match += 1
        # validate data type: AddressFieldInput20240614
        if not isinstance(v, AddressFieldInput20240614):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AddressFieldInput20240614`")
        else:
            match += 1
        # validate data type: TextFieldInput20240614
        if not isinstance(v, TextFieldInput20240614):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TextFieldInput20240614`")
        else:
            match += 1
        # validate data type: NumberFieldInput20240614
        if not isinstance(v, NumberFieldInput20240614):
            error_messages.append(f"Error! Input type `{type(v)}` is not `NumberFieldInput20240614`")
        else:
            match += 1
        # validate data type: TextAreaFieldInput20240614
        if not isinstance(v, TextAreaFieldInput20240614):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TextAreaFieldInput20240614`")
        else:
            match += 1
        # validate data type: SelectFieldInput20240614
        if not isinstance(v, SelectFieldInput20240614):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SelectFieldInput20240614`")
        else:
            match += 1
        # validate data type: MultiSelectFieldInput20240614
        if not isinstance(v, MultiSelectFieldInput20240614):
            error_messages.append(f"Error! Input type `{type(v)}` is not `MultiSelectFieldInput20240614`")
        else:
            match += 1
        # validate data type: MultiEmailFieldInput20240614
        if not isinstance(v, MultiEmailFieldInput20240614):
            error_messages.append(f"Error! Input type `{type(v)}` is not `MultiEmailFieldInput20240614`")
        else:
            match += 1
        # validate data type: CheckboxGroupFieldInput20240614
        if not isinstance(v, CheckboxGroupFieldInput20240614):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CheckboxGroupFieldInput20240614`")
        else:
            match += 1
        # validate data type: RadioGroupFieldInput20240614
        if not isinstance(v, RadioGroupFieldInput20240614):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RadioGroupFieldInput20240614`")
        else:
            match += 1
        # validate data type: BooleanFieldInput20240614
        if not isinstance(v, BooleanFieldInput20240614):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BooleanFieldInput20240614`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in CreateEventTypeInput20240614BookingFieldsInner with oneOf schemas: AddressFieldInput20240614, BooleanFieldInput20240614, CheckboxGroupFieldInput20240614, MultiEmailFieldInput20240614, MultiSelectFieldInput20240614, NumberFieldInput20240614, PhoneFieldInput20240614, RadioGroupFieldInput20240614, SelectFieldInput20240614, TextAreaFieldInput20240614, TextFieldInput20240614. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in CreateEventTypeInput20240614BookingFieldsInner with oneOf schemas: AddressFieldInput20240614, BooleanFieldInput20240614, CheckboxGroupFieldInput20240614, MultiEmailFieldInput20240614, MultiSelectFieldInput20240614, NumberFieldInput20240614, PhoneFieldInput20240614, RadioGroupFieldInput20240614, SelectFieldInput20240614, TextAreaFieldInput20240614, TextFieldInput20240614. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into PhoneFieldInput20240614
        try:
            instance.actual_instance = PhoneFieldInput20240614.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AddressFieldInput20240614
        try:
            instance.actual_instance = AddressFieldInput20240614.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into TextFieldInput20240614
        try:
            instance.actual_instance = TextFieldInput20240614.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into NumberFieldInput20240614
        try:
            instance.actual_instance = NumberFieldInput20240614.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into TextAreaFieldInput20240614
        try:
            instance.actual_instance = TextAreaFieldInput20240614.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SelectFieldInput20240614
        try:
            instance.actual_instance = SelectFieldInput20240614.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into MultiSelectFieldInput20240614
        try:
            instance.actual_instance = MultiSelectFieldInput20240614.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into MultiEmailFieldInput20240614
        try:
            instance.actual_instance = MultiEmailFieldInput20240614.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into CheckboxGroupFieldInput20240614
        try:
            instance.actual_instance = CheckboxGroupFieldInput20240614.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into RadioGroupFieldInput20240614
        try:
            instance.actual_instance = RadioGroupFieldInput20240614.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BooleanFieldInput20240614
        try:
            instance.actual_instance = BooleanFieldInput20240614.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into CreateEventTypeInput20240614BookingFieldsInner with oneOf schemas: AddressFieldInput20240614, BooleanFieldInput20240614, CheckboxGroupFieldInput20240614, MultiEmailFieldInput20240614, MultiSelectFieldInput20240614, NumberFieldInput20240614, PhoneFieldInput20240614, RadioGroupFieldInput20240614, SelectFieldInput20240614, TextAreaFieldInput20240614, TextFieldInput20240614. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into CreateEventTypeInput20240614BookingFieldsInner with oneOf schemas: AddressFieldInput20240614, BooleanFieldInput20240614, CheckboxGroupFieldInput20240614, MultiEmailFieldInput20240614, MultiSelectFieldInput20240614, NumberFieldInput20240614, PhoneFieldInput20240614, RadioGroupFieldInput20240614, SelectFieldInput20240614, TextAreaFieldInput20240614, TextFieldInput20240614. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], AddressFieldInput20240614, BooleanFieldInput20240614, CheckboxGroupFieldInput20240614, MultiEmailFieldInput20240614, MultiSelectFieldInput20240614, NumberFieldInput20240614, PhoneFieldInput20240614, RadioGroupFieldInput20240614, SelectFieldInput20240614, TextAreaFieldInput20240614, TextFieldInput20240614]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


