# coding: utf-8

"""
    Cal.com API v2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Integration(BaseModel):
    """
    Integration
    """ # noqa: E501
    app_data: Optional[Dict[str, Any]] = Field(default=None, alias="appData")
    dir_name: Optional[StrictStr] = Field(default=None, alias="dirName")
    template: Optional[StrictStr] = Field(default=None, alias="__template")
    name: StrictStr
    description: StrictStr
    installed: Optional[StrictBool] = None
    type: StrictStr
    title: Optional[StrictStr] = None
    variant: StrictStr
    category: Optional[StrictStr] = None
    categories: List[StrictStr]
    logo: StrictStr
    publisher: StrictStr
    slug: StrictStr
    url: StrictStr
    email: StrictStr
    location_option: Optional[Dict[str, Any]] = Field(alias="locationOption")
    __properties: ClassVar[List[str]] = ["appData", "dirName", "__template", "name", "description", "installed", "type", "title", "variant", "category", "categories", "logo", "publisher", "slug", "url", "email", "locationOption"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Integration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if app_data (nullable) is None
        # and model_fields_set contains the field
        if self.app_data is None and "app_data" in self.model_fields_set:
            _dict['appData'] = None

        # set to None if location_option (nullable) is None
        # and model_fields_set contains the field
        if self.location_option is None and "location_option" in self.model_fields_set:
            _dict['locationOption'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Integration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "appData": obj.get("appData"),
            "dirName": obj.get("dirName"),
            "__template": obj.get("__template"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "installed": obj.get("installed"),
            "type": obj.get("type"),
            "title": obj.get("title"),
            "variant": obj.get("variant"),
            "category": obj.get("category"),
            "categories": obj.get("categories"),
            "logo": obj.get("logo"),
            "publisher": obj.get("publisher"),
            "slug": obj.get("slug"),
            "url": obj.get("url"),
            "email": obj.get("email"),
            "locationOption": obj.get("locationOption")
        })
        return _obj


