# coding: utf-8

"""
    Cal.com API v2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class CreateOrgTeamDto(BaseModel):
    """
    CreateOrgTeamDto
    """ # noqa: E501
    name: Annotated[str, Field(min_length=1, strict=True)]
    slug: Optional[StrictStr] = None
    logo_url: Optional[StrictStr] = Field(default=None, alias="logoUrl")
    cal_video_logo: Optional[StrictStr] = Field(default=None, alias="calVideoLogo")
    app_logo: Optional[StrictStr] = Field(default=None, alias="appLogo")
    app_icon_logo: Optional[StrictStr] = Field(default=None, alias="appIconLogo")
    bio: Optional[StrictStr] = None
    hide_branding: Optional[StrictBool] = Field(default=False, alias="hideBranding")
    is_private: Optional[StrictBool] = Field(default=None, alias="isPrivate")
    hide_book_a_team_member: Optional[StrictBool] = Field(default=None, alias="hideBookATeamMember")
    metadata: Optional[StrictStr] = None
    theme: Optional[StrictStr] = None
    brand_color: Optional[StrictStr] = Field(default=None, alias="brandColor")
    dark_brand_color: Optional[StrictStr] = Field(default=None, alias="darkBrandColor")
    banner_url: Optional[StrictStr] = Field(default=None, alias="bannerUrl")
    time_format: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="timeFormat")
    time_zone: Optional[StrictStr] = Field(default='Europe/London', alias="timeZone")
    week_start: Optional[StrictStr] = Field(default='Sunday', alias="weekStart")
    auto_accept_creator: Optional[StrictBool] = Field(default=True, alias="autoAcceptCreator")
    __properties: ClassVar[List[str]] = ["name", "slug", "logoUrl", "calVideoLogo", "appLogo", "appIconLogo", "bio", "hideBranding", "isPrivate", "hideBookATeamMember", "metadata", "theme", "brandColor", "darkBrandColor", "bannerUrl", "timeFormat", "timeZone", "weekStart", "autoAcceptCreator"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateOrgTeamDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateOrgTeamDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "slug": obj.get("slug"),
            "logoUrl": obj.get("logoUrl"),
            "calVideoLogo": obj.get("calVideoLogo"),
            "appLogo": obj.get("appLogo"),
            "appIconLogo": obj.get("appIconLogo"),
            "bio": obj.get("bio"),
            "hideBranding": obj.get("hideBranding") if obj.get("hideBranding") is not None else False,
            "isPrivate": obj.get("isPrivate"),
            "hideBookATeamMember": obj.get("hideBookATeamMember"),
            "metadata": obj.get("metadata"),
            "theme": obj.get("theme"),
            "brandColor": obj.get("brandColor"),
            "darkBrandColor": obj.get("darkBrandColor"),
            "bannerUrl": obj.get("bannerUrl"),
            "timeFormat": obj.get("timeFormat"),
            "timeZone": obj.get("timeZone") if obj.get("timeZone") is not None else 'Europe/London',
            "weekStart": obj.get("weekStart") if obj.get("weekStart") is not None else 'Sunday',
            "autoAcceptCreator": obj.get("autoAcceptCreator") if obj.get("autoAcceptCreator") is not None else True
        })
        return _obj


