# coding: utf-8

"""
    Cal.com API v2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class CreateOrganizationUserInput(BaseModel):
    """
    CreateOrganizationUserInput
    """ # noqa: E501
    email: StrictStr = Field(description="User email address")
    username: Optional[StrictStr] = Field(default=None, description="Username")
    weekday: Optional[StrictStr] = Field(default=None, description="Preferred weekday")
    brand_color: Optional[StrictStr] = Field(default=None, description="Brand color in HEX format", alias="brandColor")
    dark_brand_color: Optional[StrictStr] = Field(default=None, description="Dark brand color in HEX format", alias="darkBrandColor")
    hide_branding: Optional[StrictBool] = Field(default=None, description="Hide branding", alias="hideBranding")
    time_zone: Optional[StrictStr] = Field(default=None, description="Time zone", alias="timeZone")
    theme: Optional[StrictStr] = Field(default=None, description="Theme")
    app_theme: Optional[StrictStr] = Field(default=None, description="Application theme", alias="appTheme")
    time_format: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Time format", alias="timeFormat")
    default_schedule_id: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="Default schedule ID", alias="defaultScheduleId")
    locale: Optional[StrictStr] = Field(default='en', description="Locale")
    avatar_url: Optional[StrictStr] = Field(default=None, description="Avatar URL", alias="avatarUrl")
    organization_role: Dict[str, Any] = Field(alias="organizationRole")
    auto_accept: Dict[str, Any] = Field(alias="autoAccept")
    __properties: ClassVar[List[str]] = ["email", "username", "weekday", "brandColor", "darkBrandColor", "hideBranding", "timeZone", "theme", "appTheme", "timeFormat", "defaultScheduleId", "locale", "avatarUrl", "organizationRole", "autoAccept"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateOrganizationUserInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if theme (nullable) is None
        # and model_fields_set contains the field
        if self.theme is None and "theme" in self.model_fields_set:
            _dict['theme'] = None

        # set to None if app_theme (nullable) is None
        # and model_fields_set contains the field
        if self.app_theme is None and "app_theme" in self.model_fields_set:
            _dict['appTheme'] = None

        # set to None if locale (nullable) is None
        # and model_fields_set contains the field
        if self.locale is None and "locale" in self.model_fields_set:
            _dict['locale'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateOrganizationUserInput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "email": obj.get("email"),
            "username": obj.get("username"),
            "weekday": obj.get("weekday"),
            "brandColor": obj.get("brandColor"),
            "darkBrandColor": obj.get("darkBrandColor"),
            "hideBranding": obj.get("hideBranding"),
            "timeZone": obj.get("timeZone"),
            "theme": obj.get("theme"),
            "appTheme": obj.get("appTheme"),
            "timeFormat": obj.get("timeFormat"),
            "defaultScheduleId": obj.get("defaultScheduleId"),
            "locale": obj.get("locale") if obj.get("locale") is not None else 'en',
            "avatarUrl": obj.get("avatarUrl"),
            "organizationRole": obj.get("organizationRole"),
            "autoAccept": obj.get("autoAccept")
        })
        return _obj


