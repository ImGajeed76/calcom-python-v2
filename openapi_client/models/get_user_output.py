# coding: utf-8

"""
    Cal.com API v2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class GetUserOutput(BaseModel):
    """
    GetUserOutput
    """ # noqa: E501
    id: Union[StrictFloat, StrictInt] = Field(description="The ID of the user")
    username: Optional[StrictStr] = Field(default=None, description="The username of the user")
    name: Optional[StrictStr] = Field(default=None, description="The name of the user")
    email: StrictStr = Field(description="The email of the user")
    email_verified: Optional[datetime] = Field(default=None, description="The date when the email was verified", alias="emailVerified")
    bio: Optional[StrictStr] = Field(default=None, description="The bio of the user")
    avatar_url: Optional[StrictStr] = Field(default=None, description="The URL of the user's avatar", alias="avatarUrl")
    time_zone: StrictStr = Field(description="The time zone of the user", alias="timeZone")
    week_start: StrictStr = Field(description="The week start day of the user", alias="weekStart")
    app_theme: Optional[StrictStr] = Field(default=None, description="The app theme of the user", alias="appTheme")
    theme: Optional[StrictStr] = Field(default=None, description="The theme of the user")
    default_schedule_id: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The ID of the default schedule for the user", alias="defaultScheduleId")
    locale: Optional[StrictStr] = Field(default=None, description="The locale of the user")
    time_format: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The time format of the user", alias="timeFormat")
    hide_branding: StrictBool = Field(description="Whether to hide branding for the user", alias="hideBranding")
    brand_color: Optional[StrictStr] = Field(default=None, description="The brand color of the user", alias="brandColor")
    dark_brand_color: Optional[StrictStr] = Field(default=None, description="The dark brand color of the user", alias="darkBrandColor")
    allow_dynamic_booking: Optional[StrictBool] = Field(default=None, description="Whether dynamic booking is allowed for the user", alias="allowDynamicBooking")
    created_date: datetime = Field(description="The date when the user was created", alias="createdDate")
    verified: Optional[StrictBool] = Field(default=None, description="Whether the user is verified")
    invited_to: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The ID of the user who invited this user", alias="invitedTo")
    __properties: ClassVar[List[str]] = ["id", "username", "name", "email", "emailVerified", "bio", "avatarUrl", "timeZone", "weekStart", "appTheme", "theme", "defaultScheduleId", "locale", "timeFormat", "hideBranding", "brandColor", "darkBrandColor", "allowDynamicBooking", "createdDate", "verified", "invitedTo"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetUserOutput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if username (nullable) is None
        # and model_fields_set contains the field
        if self.username is None and "username" in self.model_fields_set:
            _dict['username'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if email_verified (nullable) is None
        # and model_fields_set contains the field
        if self.email_verified is None and "email_verified" in self.model_fields_set:
            _dict['emailVerified'] = None

        # set to None if bio (nullable) is None
        # and model_fields_set contains the field
        if self.bio is None and "bio" in self.model_fields_set:
            _dict['bio'] = None

        # set to None if avatar_url (nullable) is None
        # and model_fields_set contains the field
        if self.avatar_url is None and "avatar_url" in self.model_fields_set:
            _dict['avatarUrl'] = None

        # set to None if app_theme (nullable) is None
        # and model_fields_set contains the field
        if self.app_theme is None and "app_theme" in self.model_fields_set:
            _dict['appTheme'] = None

        # set to None if theme (nullable) is None
        # and model_fields_set contains the field
        if self.theme is None and "theme" in self.model_fields_set:
            _dict['theme'] = None

        # set to None if default_schedule_id (nullable) is None
        # and model_fields_set contains the field
        if self.default_schedule_id is None and "default_schedule_id" in self.model_fields_set:
            _dict['defaultScheduleId'] = None

        # set to None if locale (nullable) is None
        # and model_fields_set contains the field
        if self.locale is None and "locale" in self.model_fields_set:
            _dict['locale'] = None

        # set to None if time_format (nullable) is None
        # and model_fields_set contains the field
        if self.time_format is None and "time_format" in self.model_fields_set:
            _dict['timeFormat'] = None

        # set to None if brand_color (nullable) is None
        # and model_fields_set contains the field
        if self.brand_color is None and "brand_color" in self.model_fields_set:
            _dict['brandColor'] = None

        # set to None if dark_brand_color (nullable) is None
        # and model_fields_set contains the field
        if self.dark_brand_color is None and "dark_brand_color" in self.model_fields_set:
            _dict['darkBrandColor'] = None

        # set to None if allow_dynamic_booking (nullable) is None
        # and model_fields_set contains the field
        if self.allow_dynamic_booking is None and "allow_dynamic_booking" in self.model_fields_set:
            _dict['allowDynamicBooking'] = None

        # set to None if verified (nullable) is None
        # and model_fields_set contains the field
        if self.verified is None and "verified" in self.model_fields_set:
            _dict['verified'] = None

        # set to None if invited_to (nullable) is None
        # and model_fields_set contains the field
        if self.invited_to is None and "invited_to" in self.model_fields_set:
            _dict['invitedTo'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetUserOutput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "username": obj.get("username"),
            "name": obj.get("name"),
            "email": obj.get("email"),
            "emailVerified": obj.get("emailVerified"),
            "bio": obj.get("bio"),
            "avatarUrl": obj.get("avatarUrl"),
            "timeZone": obj.get("timeZone"),
            "weekStart": obj.get("weekStart"),
            "appTheme": obj.get("appTheme"),
            "theme": obj.get("theme"),
            "defaultScheduleId": obj.get("defaultScheduleId"),
            "locale": obj.get("locale"),
            "timeFormat": obj.get("timeFormat"),
            "hideBranding": obj.get("hideBranding"),
            "brandColor": obj.get("brandColor"),
            "darkBrandColor": obj.get("darkBrandColor"),
            "allowDynamicBooking": obj.get("allowDynamicBooking"),
            "createdDate": obj.get("createdDate"),
            "verified": obj.get("verified"),
            "invitedTo": obj.get("invitedTo")
        })
        return _obj


